// Express
import express from 'express'
import http from 'http'
import bodyParser from 'body-parser'
import path from 'path'

// Swagger
import swaggerUi from 'swagger-ui-express'
import yaml from 'yamljs'

// Logging
import Logger from './Logger'

// Properties
import properties from '../properties.js'

// Security
import cors from 'cors'

// Controllers
import SecurityController from '../controllers/SecurityController'

// Start Import Controllers

// Database
import Database from './Database.js'
import { middleware } from 'express-http-context'
import userController from '../controllers/user.controller'
import enterpriseController from '../controllers/enterprise.controller'
import accountController from '../controllers/account.controller'
import cashinController from '../controllers/cashinflow.controller'
import cashjournalController from '../controllers/cashjournal.controller'
import cashoutController from '../controllers/cashoutflow.controller'
import SalesController from '../controllers/SalesController'
import LedgerController from '../controllers/LedgerController'
import InventoryController from '../controllers/InventoryController'
import CustomerController from '../controllers/CustomerController'
import VendorController from '../controllers/VendorController'
import LookupController from '../controllers/LookupController'
import AccountPayableController from '../controllers/AccountPayableController'
import AccountReceivableController from '../controllers/AccountReceivableController'
import LoansPayableController from '../controllers/LoansPayableController'
import LoansPayableItemController from '../controllers/LoansPayableItemController'
import ReportsController from '../controllers/ReportsController'
import BeginningBalanceController from '../controllers/BeginningBalanceController'
import LoansProceedController from '../controllers/LoansProceedController'
import SubscriptionController from '../controllers/SubscriptionController'
// End Import Controllers

class Server {
  constructor() {
    this.app = express()
  }

  /**
   * Start the server
   * @returns {Promise<void>}
   */
  async init() {
    Logger.info(
      "\r\n\r\n-----------------------------------\r\n\r\nStarting eVoucher \r\nGenerated by\r\n\r\n   _____ _          __  __      _     _           \r\n  / ____| |        / _|/ _|    | |   | |          \r\n | (___ | | ____ _| |_| |_ ___ | | __| | ___ _ __ \r\n  \\___ \\| |/ / _` |  _|  _/ _ \\| |/ _` |/ _ \\ '__|\r\n  ____) |   < (_| | | | || (_) | | (_| |  __/ |   \r\n |_____/|_|\\_\\__,_|_| |_| \\___/|_|\\__,_|\\___|_|   \r\n\r\nFor more documentation please visit https://skaffolder.com/#/documentation\r\n\r\n-----------------------------------\r\n\r\n"
    )

    // Start Init Database
    Database.init()
    // End Init Database

    // Add parser
    this.app.use(bodyParser.json())
    this.app.use(middleware)
    this.app.use(bodyParser.urlencoded({ extended: true }))
    this.app.use(Logger.expressMiddleware)

    // Securitiy
    // this.app.use(helmet());
    this.app.use(cors())

    // Swagger
    const swaggerDocument = yaml.load('./swagger.yaml')
    this.app.use(
      properties.api + '/docs',
      swaggerUi.serve,
      swaggerUi.setup(swaggerDocument)
    )

    // Redirect frontend
    this.app.use('*', (req, res, next) => {
      if (req.originalUrl) {
        const url = req.originalUrl
        if (!url.startsWith('/api/') && url.indexOf('.') === -1) {
          res
            .status(200)
            .sendFile(path.resolve(path.join(__dirname, '//..//', properties.publicPath.replace(/\//g, '//'), '//index.html')))
        } else {
          next()
        }
      } else {
        next()
      }
    })

    // Start App Server
    const server = http.Server(this.app)
    this.app.use(express.static(properties.publicPath))

    await server.listen(properties.port)
    Logger.info('Server started on port ' + properties.port)
    Logger.info(
      'Swagger docs at http://localhost:' +
      properties.port +
      properties.api +
      '/docs'
    )

    // Import controllers
    const router = express.Router()
    await this.initClasses(router)
    this.app.use('/', router)
  }

  async initClasses(router) {
    SecurityController.init(router)
    userController.init(router)
    enterpriseController.init(router)
    accountController.init(router)
    cashinController.init(router)
    cashjournalController.init(router)
    cashoutController.init(router)
    SalesController.init(router)
    InventoryController.init(router)
    LedgerController.init(router)
    CustomerController.init(router)
    VendorController.init(router)
    LookupController.init(router)
    AccountPayableController.init(router)
    AccountReceivableController.init(router)
    LoansPayableController.init(router)
    LoansPayableItemController.init(router)
    ReportsController.init(router)
    BeginningBalanceController.init(router)
    LoansProceedController.init(router)
    SubscriptionController.init(router)
  }
}

export default new Server()
